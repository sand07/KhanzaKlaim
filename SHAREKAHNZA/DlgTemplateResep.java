package inventory;

import fungsi.WarnaTable;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import fungsi.akses;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

public class DlgTemplateResep extends javax.swing.JDialog {

    private final DefaultTableModel tabMode;
    private sekuel Sequel = new sekuel();
    private validasi Valid = new validasi();
    private Connection koneksi = koneksiDB.condb();
    private PreparedStatement ps, ps2, ps3, pscetakracikan, pscetakracikandetail, pscetaknonracik;
    private ResultSet rs, rs2, rs3, rscetakracikan, rscetakracikandetail, rscetaknonracik;
    private String aktifkanparsial = "no", norm = "", kddokter = "", kode_pj = "", norawat = "", status = "", rinciobat = "";
    private final Properties prop = new Properties();
    private int jmlparsial = 0;

    /**
     * Creates new form
     *
     * @param parent
     * @param modal
     */
    public DlgTemplateResep(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        Object[] row = {"No.Resep", "Tgl.Resep", "Jam Resep", "Nama Template", "Kode", "OBAT", "Dokter Peresep", "Kode Dokter"};
        tabMode = new DefaultTableModel(null, row) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        tbPemisahan.setModel(tabMode);

        //tbObat.setDefaultRenderer(Object.class, new WarnaTable(panelJudul.getBackground(),tbObat.getBackground()));
        tbPemisahan.setPreferredScrollableViewportSize(new Dimension(500, 500));
        tbPemisahan.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (int i = 0; i < 8; i++) {
            TableColumn column = tbPemisahan.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(75);
            } else if (i == 1) {
                column.setPreferredWidth(65);
            } else if (i == 2) {
                column.setPreferredWidth(60);
            } else if (i == 3) {
                column.setPreferredWidth(170);
            } else if (i == 4) {
                column.setPreferredWidth(90);
            } else if (i == 5) {
                column.setPreferredWidth(300);
            } else if (i == 6) {
                column.setMinWidth(0);
                column.setMaxWidth(0);
            } else if (i == 7) {
                column.setMinWidth(0);
                column.setMaxWidth(0);
            }
        }
        tbPemisahan.setDefaultRenderer(Object.class, new WarnaTable());

        try {
            prop.loadFromXML(new FileInputStream("setting/database.xml"));
            aktifkanparsial = prop.getProperty("AKTIFKANBILLINGPARSIAL");
        } catch (Exception ex) {
            aktifkanparsial = "no";
        }

        if (koneksiDB.CARICEPAT().equals("aktif")) {
            TCari.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    if (TCari.getText().length() > 2) {
                        tampil();
                    }
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    if (TCari.getText().length() > 2) {
                        tampil();
                    }
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    if (TCari.getText().length() > 2) {
                        tampil();
                    }
                }
            });
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Popup = new javax.swing.JPopupMenu();
        ppCetakResep = new javax.swing.JMenuItem();
        internalFrame1 = new widget.InternalFrame();
        panelisi1 = new widget.panelisi();
        jLabel6 = new widget.Label();
        TCari = new widget.TextBox();
        BtnCari = new widget.Button();
        jLabel7 = new widget.Label();
        jLabel8 = new widget.Label();
        cmbHlm = new widget.ComboBox();
        BtnTambah = new widget.Button();
        BtnKeluar = new widget.Button();
        scrollPane1 = new widget.ScrollPane();
        tbPemisahan = new widget.Table();
        FormInput = new widget.PanelBiasa();
        jLabel30 = new widget.Label();

        Popup.setName("Popup"); // NOI18N

        ppCetakResep.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        ppCetakResep.setForeground(new java.awt.Color(50, 50, 50));
        ppCetakResep.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/category.png"))); // NOI18N
        ppCetakResep.setText("Cetak Bukti Resep");
        ppCetakResep.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ppCetakResep.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ppCetakResep.setName("ppCetakResep"); // NOI18N
        ppCetakResep.setPreferredSize(new java.awt.Dimension(180, 25));
        ppCetakResep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ppCetakResepActionPerformed(evt);
            }
        });
        Popup.add(ppCetakResep);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), "::[ Daftar Template Resep Anda ]::", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(50, 50, 50))); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        panelisi1.setName("panelisi1"); // NOI18N
        panelisi1.setPreferredSize(new java.awt.Dimension(55, 55));
        panelisi1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        jLabel6.setText("Key Word :");
        jLabel6.setName("jLabel6"); // NOI18N
        jLabel6.setPreferredSize(new java.awt.Dimension(70, 23));
        panelisi1.add(jLabel6);

        TCari.setName("TCari"); // NOI18N
        TCari.setPreferredSize(new java.awt.Dimension(240, 23));
        TCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TCariKeyPressed(evt);
            }
        });
        panelisi1.add(TCari);

        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('1');
        BtnCari.setToolTipText("Alt+1");
        BtnCari.setName("BtnCari"); // NOI18N
        BtnCari.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        BtnCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnCariKeyPressed(evt);
            }
        });
        panelisi1.add(BtnCari);

        jLabel7.setName("jLabel7"); // NOI18N
        jLabel7.setPreferredSize(new java.awt.Dimension(20, 23));
        panelisi1.add(jLabel7);

        jLabel8.setText("Limit Data :");
        jLabel8.setName("jLabel8"); // NOI18N
        jLabel8.setPreferredSize(new java.awt.Dimension(70, 23));
        panelisi1.add(jLabel8);

        cmbHlm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "200", "300", "400", "500", "1000" }));
        cmbHlm.setName("cmbHlm"); // NOI18N
        cmbHlm.setPreferredSize(new java.awt.Dimension(90, 23));
        panelisi1.add(cmbHlm);

        BtnTambah.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/editcopy.png"))); // NOI18N
        BtnTambah.setMnemonic('S');
        BtnTambah.setText("Copy / Salin Resep");
        BtnTambah.setToolTipText("Alt+S");
        BtnTambah.setName("BtnTambah"); // NOI18N
        BtnTambah.setPreferredSize(new java.awt.Dimension(150, 30));
        BtnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTambahActionPerformed(evt);
            }
        });
        BtnTambah.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnTambahKeyPressed(evt);
            }
        });
        panelisi1.add(BtnTambah);

        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelisi1.add(BtnKeluar);

        internalFrame1.add(panelisi1, java.awt.BorderLayout.PAGE_END);

        scrollPane1.setName("scrollPane1"); // NOI18N
        scrollPane1.setOpaque(true);

        tbPemisahan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbPemisahan.setComponentPopupMenu(Popup);
        tbPemisahan.setName("tbPemisahan"); // NOI18N
        tbPemisahan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPemisahanMouseClicked(evt);
            }
        });
        tbPemisahan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbPemisahanKeyPressed(evt);
            }
        });
        scrollPane1.setViewportView(tbPemisahan);

        internalFrame1.add(scrollPane1, java.awt.BorderLayout.CENTER);

        FormInput.setName("FormInput"); // NOI18N
        FormInput.setPreferredSize(new java.awt.Dimension(260, 30));
        FormInput.setLayout(null);

        jLabel30.setForeground(new java.awt.Color(255, 51, 0));
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel30.setText("Informasi : Data yang tampil adalah data resep yg pernah anda simpan sebagai template. Silahkan cari berdasarkan Nama Template");
        jLabel30.setName("jLabel30"); // NOI18N
        FormInput.add(jLabel30);
        jLabel30.setBounds(10, 0, 960, 23);

        internalFrame1.add(FormInput, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
        tampil();
}//GEN-LAST:event_BtnCariActionPerformed

    private void BtnCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnCariKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            tampil();
        } else {

        }
}//GEN-LAST:event_BtnCariKeyPressed

    private void tbPemisahanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPemisahanMouseClicked
        if (tabMode.getRowCount() != 0) {
            getData();
            if (evt.getClickCount() == 2) {
                if (akses.getberi_obat() == true) {
                    BtnTambahActionPerformed(null);
                }
            }
        }
}//GEN-LAST:event_tbPemisahanMouseClicked

    private void tbPemisahanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPemisahanKeyPressed
        if (tabMode.getRowCount() != 0) {
            if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
                if (akses.getberi_obat() == true) {
                    BtnTambahActionPerformed(null);
                }
            }
        }
}//GEN-LAST:event_tbPemisahanKeyPressed

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
}//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            dispose();
        } else {

        }
}//GEN-LAST:event_BtnKeluarKeyPressed

    private void BtnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTambahActionPerformed
        if (tabMode.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Maaf, data sudah habis...!!!!");
        } else if (tbPemisahan.getSelectedRow() <= -1) {
            JOptionPane.showMessageDialog(null, "Maaf, Silahkan pilih data resep dokter..!!");
        } else {
            if (tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Silahkan pilih No.Resep..!!");
            } else {
                jmlparsial = 0;
                if (aktifkanparsial.equals("yes")) {
                    jmlparsial = Sequel.cariInteger("select count(kd_pj) from set_input_parsial where kd_pj=?", kode_pj);
                }
                if (jmlparsial > 0) {
                    panggilform();
                } else {
                    if (Sequel.cariRegistrasi(norawat) > 0) {
                        JOptionPane.showMessageDialog(rootPane, "Data billing sudah terverifikasi ..!!");
                    } else {
                        panggilform();
                    }
                }
            }
        }
}//GEN-LAST:event_BtnTambahActionPerformed

    private void BtnTambahKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnTambahKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnTambahActionPerformed(null);
        } else {

        }
}//GEN-LAST:event_BtnTambahKeyPressed

    /*
private void KdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TKdKeyPressed
    Valid.pindah(evt,BtnCari,Nm);
}//GEN-LAST:event_TKdKeyPressed
*/
    private void ppCetakResepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ppCetakResepActionPerformed
        if (tbPemisahan.getSelectedRow() != -1) {
//            Sequel.queryu("truncate table temporary_resep_racikan");
            if (Sequel.cariInteger("select COUNT(resep_dokter_racikan.no_resep) from resep_dokter_racikan where resep_dokter_racikan.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'") > 0 && Sequel.cariInteger("select COUNT(resep_dokter.no_resep) from resep_dokter where resep_dokter.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'") > 0) {
                Sequel.queryu("truncate table temporary_resep_gabung");
                try {
                    pscetakracikan = koneksi.prepareStatement("SELECT\n"
                            + "	resep_dokter_racikan.no_resep,\n"
                            + "	resep_dokter_racikan.nama_racik,\n"
                            + "	resep_dokter_racikan.jml_dr,resep_dokter_racikan.no_racik,\n"
                            + "	resep_dokter_racikan.aturan_pakai,\n"
                            + "	resep_dokter_racikan.keterangan,\n"
                            + "	metode_racik.nm_racik,\n"
                            + "	resep_obat.tgl_peresepan,\n"
                            + "	resep_obat.jam_peresepan \n"
                            + "FROM\n"
                            + "	resep_dokter_racikan\n"
                            + "	INNER JOIN metode_racik ON resep_dokter_racikan.kd_racik = metode_racik.kd_racik\n"
                            + "	INNER JOIN resep_obat ON resep_dokter_racikan.no_resep = resep_obat.no_resep \n"
                            + "WHERE\n"
                            + "	resep_obat.no_resep = '" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'");
                    rscetakracikan = pscetakracikan.executeQuery();
                    try {
                        while (rscetakracikan.next()) {
                            rinciobat = "";
                            pscetakracikandetail = koneksi.prepareStatement("SELECT\n"
                                    + "	databarang.kode_brng, \n"
                                    + "	databarang.nama_brng,databarang.kode_sat, \n"
                                    + "	resep_dokter_racikan_detail.p1, \n"
                                    + "	resep_dokter_racikan_detail.p2, \n"
                                    + "	resep_dokter_racikan_detail.jml\n"
                                    + "FROM\n"
                                    + "	resep_dokter_racikan_detail\n"
                                    + "	INNER JOIN\n"
                                    + "	databarang\n"
                                    + "	ON \n"
                                    + "		resep_dokter_racikan_detail.kode_brng = databarang.kode_brng\n"
                                    + "		where resep_dokter_racikan_detail.no_resep='" + rscetakracikan.getString("no_resep") + "' and resep_dokter_racikan_detail.no_racik='" + rscetakracikan.getString("no_racik") + "' ");
                            rscetakracikandetail = pscetakracikandetail.executeQuery();
                            try {
                                while (rscetakracikandetail.next()) {
                                    rinciobat = "- " + rscetakracikandetail.getString("kode_brng") + " " + rscetakracikandetail.getString("nama_brng") + " " + rscetakracikandetail.getString("p1") + "/" + rscetakracikandetail.getString("p2") + " sebanyak " + rscetakracikandetail.getString("jml") + " " + rscetakracikandetail.getString("kode_sat") + " \n" + rinciobat;
                                }
                            } catch (Exception e) {
                                System.out.println("Notifikasi Detail Racikan : " + e);
                            } finally {
                                if (rscetakracikandetail != null) {
                                    rscetakracikandetail.close();
                                }
                                if (pscetakracikandetail != null) {
                                    pscetakracikandetail.close();
                                }
                            }

                            Sequel.menyimpan("temporary_resep_gabung", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", 38, new String[]{
                                "racikan", rscetakracikan.getString("no_racik"), rscetakracikan.getString("nama_racik") + "\n" + " " + rinciobat + "", rscetakracikan.getString("aturan_pakai"), rscetakracikan.getString("jml_dr"), rscetakracikan.getString("nm_racik"), rscetakracikan.getString("no_resep"), "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
                            });

                        }
                    } catch (Exception e) {
                        System.out.println("Notifikasi Detail Racikan : " + e);
                    } finally {
                        if (rscetakracikan != null) {
                            rscetakracikan.close();
                        }
                        if (pscetakracikan != null) {
                            pscetakracikan.close();
                        }
                    }
                } catch (Exception e) {

                }
                try {
                    pscetaknonracik = koneksi.prepareStatement("SELECT resep_dokter.kode_brng, databarang.nama_brng, resep_dokter.jml, resep_dokter.aturan_pakai, resep_dokter.no_resep FROM resep_obat INNER JOIN resep_dokter ON resep_obat.no_resep = resep_dokter.no_resep INNER JOIN databarang ON resep_dokter.kode_brng = databarang.kode_brng WHERE resep_obat.no_resep = '" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'");
                    rscetaknonracik = pscetaknonracik.executeQuery();
                    try {
                        while (rscetaknonracik.next()) {
                            Sequel.menyimpan("temporary_resep_gabung", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", 38, new String[]{
                                "nonracik", rscetaknonracik.getString("kode_brng"), rscetaknonracik.getString("nama_brng"), rscetaknonracik.getString("jml"), rscetaknonracik.getString("aturan_pakai"), "", rscetaknonracik.getString("no_resep"), "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
                            });

                        }
                    } catch (Exception e) {
                        System.out.println("Notifikasi Detail Racikan : " + e);
                    } finally {
                        if (rscetaknonracik != null) {
                            rscetaknonracik.close();
                        }
                        if (pscetaknonracik != null) {
                            pscetaknonracik.close();
                        }
                    }
                } catch (Exception e) {

                }

                System.out.println("mulai cetak gabung");
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                Map<String, Object> paramgabung = new HashMap<>();
                paramgabung.put("namars", akses.getnamars());
                paramgabung.put("alamatrs", akses.getalamatrs());
                paramgabung.put("kotars", akses.getkabupatenrs());
                paramgabung.put("propinsirs", akses.getpropinsirs());
                paramgabung.put("kontakrs", akses.getkontakrs());
                paramgabung.put("emailrs", akses.getemailrs());
                paramgabung.put("noresep", tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString());
                paramgabung.put("tglresep", Sequel.cariIsi("select concat(resep_obat.tgl_peresepan, ',',resep_obat.jam_peresepan) from resep_obat where resep_obat.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'"));
                paramgabung.put("dokterperesep", Sequel.cariIsi("select dokter.nm_dokter from dokter join resep_obat on dokter.kd_dokter=resep_obat.kd_dokter where resep_obat.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'"));
                paramgabung.put("norm", Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
                paramgabung.put("penjamin", Sequel.cariIsi("select penjab.png_jawab from reg_periksa inner join penjab on reg_periksa.kd_pj=penjab.kd_pj where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
                paramgabung.put("namapasien", Sequel.cariIsi("select pasien.nm_pasien from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
                paramgabung.put("alergipasien", Sequel.cariIsi("select pasien.alergipasien from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
                paramgabung.put("tgllahir", Sequel.cariIsi("select pasien.tgl_lahir from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'") + " / " + Sequel.cariIsi("select concat(reg_periksa.umurdaftar,' ',reg_periksa.sttsumur) from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
                paramgabung.put("alamat", Sequel.cariIsi("select concat(pasien.alamat,', ',kelurahan.nm_kel,', ',kecamatan.nm_kec,', ',kabupaten.nm_kab,', ',propinsi.nm_prop) as alamat from pasien inner join kelurahan on pasien.kd_kel=kelurahan.kd_kel inner join kecamatan on pasien.kd_kec=kecamatan.kd_kec "
                        + "inner join kabupaten on pasien.kd_kab=kabupaten.kd_kab inner join propinsi on pasien.kd_prop=propinsi.kd_prop where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
                paramgabung.put("logo", Sequel.cariGambar("select logo from setting"));

//            jikaresepgabung
                Valid.MyReportqry("rptBuktiResepGabung.jasper", "report", "::[ Bukti Resep Elektronik Gabungan ]::",
                        "select temporary_resep_gabung.no, temporary_resep_gabung.temp1,temporary_resep_gabung.temp2,temporary_resep_gabung.temp3,temporary_resep_gabung.temp4,temporary_resep_gabung.temp5 from temporary_resep_gabung where temporary_resep_gabung.temp6='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'", paramgabung);
                this.setCursor(Cursor.getDefaultCursor());
            } else if (Sequel.cariInteger("select COUNT(resep_dokter_racikan.no_resep) from resep_dokter_racikan where resep_dokter_racikan.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'") > 0) {
                Sequel.queryu("truncate table temporary_resep_racikan");
                try {
                    pscetakracikan = koneksi.prepareStatement("SELECT\n"
                            + "	resep_dokter_racikan.no_resep,\n"
                            + "	resep_dokter_racikan.nama_racik,\n"
                            + "	resep_dokter_racikan.jml_dr,resep_dokter_racikan.no_racik,\n"
                            + "	resep_dokter_racikan.aturan_pakai,\n"
                            + "	resep_dokter_racikan.keterangan,\n"
                            + "	metode_racik.nm_racik,\n"
                            + "	resep_obat.tgl_peresepan,\n"
                            + "	resep_obat.jam_peresepan \n"
                            + "FROM\n"
                            + "	resep_dokter_racikan\n"
                            + "	INNER JOIN metode_racik ON resep_dokter_racikan.kd_racik = metode_racik.kd_racik\n"
                            + "	INNER JOIN resep_obat ON resep_dokter_racikan.no_resep = resep_obat.no_resep \n"
                            + "WHERE\n"
                            + "	resep_obat.no_resep = '" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'");
                    rscetakracikan = pscetakracikan.executeQuery();
                    try {
                        while (rscetakracikan.next()) {
                            rinciobat = "";
                            pscetakracikandetail = koneksi.prepareStatement("SELECT\n"
                                    + "	databarang.kode_brng, \n"
                                    + "	databarang.nama_brng,databarang.kode_sat, \n"
                                    + "	resep_dokter_racikan_detail.p1, \n"
                                    + "	resep_dokter_racikan_detail.p2, \n"
                                    + "	resep_dokter_racikan_detail.jml\n"
                                    + "FROM\n"
                                    + "	resep_dokter_racikan_detail\n"
                                    + "	INNER JOIN\n"
                                    + "	databarang\n"
                                    + "	ON \n"
                                    + "		resep_dokter_racikan_detail.kode_brng = databarang.kode_brng\n"
                                    + "		where resep_dokter_racikan_detail.no_resep='" + rscetakracikan.getString("no_resep") + "' and resep_dokter_racikan_detail.no_racik='" + rscetakracikan.getString("no_racik") + "' ");
                            rscetakracikandetail = pscetakracikandetail.executeQuery();
                            try {
                                while (rscetakracikandetail.next()) {
                                    rinciobat = "- " + rscetakracikandetail.getString("kode_brng") + " " + rscetakracikandetail.getString("nama_brng") + " " + rscetakracikandetail.getString("p1") + "/" + rscetakracikandetail.getString("p2") + " sebanyak " + rscetakracikandetail.getString("jml") + " " + rscetakracikandetail.getString("kode_sat") + " \n" + rinciobat;
                                }
                            } catch (Exception e) {
                                System.out.println("Notifikasi Detail Racikan : " + e);
                            } finally {
                                if (rscetakracikandetail != null) {
                                    rscetakracikandetail.close();
                                }
                                if (pscetakracikandetail != null) {
                                    pscetakracikandetail.close();
                                }
                            }

                            Sequel.menyimpan("temporary_resep_racikan", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", 38, new String[]{
                                rscetakracikan.getString("no_racik"), rscetakracikan.getString("nama_racik") + "\n" + " " + rinciobat + "", rscetakracikan.getString("aturan_pakai"), rscetakracikan.getString("jml_dr"), rscetakracikan.getString("nm_racik"), rscetakracikan.getString("no_resep"), "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
                            });

                        }
                    } catch (Exception e) {
                        System.out.println("Notifikasi Detail Racikan : " + e);
                    } finally {
                        if (rscetakracikan != null) {
                            rscetakracikan.close();
                        }
                        if (pscetakracikan != null) {
                            pscetakracikan.close();
                        }
                    }
                } catch (Exception e) {
                }

                System.out.println("mulai cetak racik");
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                Map<String, Object> paramracik = new HashMap<>();
                paramracik.put("namars", akses.getnamars());
                paramracik.put("alamatrs", akses.getalamatrs());
                paramracik.put("kotars", akses.getkabupatenrs());
                paramracik.put("propinsirs", akses.getpropinsirs());
                paramracik.put("kontakrs", akses.getkontakrs());
                paramracik.put("emailrs", akses.getemailrs());
                paramracik.put("noresep", tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString());
                paramracik.put("tglresep", Sequel.cariIsi("select concat(resep_obat.tgl_peresepan, ',',resep_obat.jam_peresepan) from resep_obat where resep_obat.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'"));
                paramracik.put("dokterperesep", Sequel.cariIsi("select dokter.nm_dokter from dokter join resep_obat on dokter.kd_dokter=resep_obat.kd_dokter where resep_obat.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'"));
                paramracik.put("norm", Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
                paramracik.put("penjamin", Sequel.cariIsi("select penjab.png_jawab from reg_periksa inner join penjab on reg_periksa.kd_pj=penjab.kd_pj where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
                paramracik.put("namapasien", Sequel.cariIsi("select pasien.nm_pasien from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
                paramracik.put("alergipasien", Sequel.cariIsi("select pasien.alergipasien from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
                paramracik.put("tgllahir", Sequel.cariIsi("select pasien.tgl_lahir from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'") + " / " + Sequel.cariIsi("select concat(reg_periksa.umurdaftar,' ',reg_periksa.sttsumur) from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
                paramracik.put("alamat", Sequel.cariIsi("select concat(pasien.alamat,', ',kelurahan.nm_kel,', ',kecamatan.nm_kec,', ',kabupaten.nm_kab,', ',propinsi.nm_prop) as alamat from pasien inner join kelurahan on pasien.kd_kel=kelurahan.kd_kel inner join kecamatan on pasien.kd_kec=kecamatan.kd_kec "
                        + "inner join kabupaten on pasien.kd_kab=kabupaten.kd_kab inner join propinsi on pasien.kd_prop=propinsi.kd_prop where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
                paramracik.put("logo", Sequel.cariGambar("select logo from setting"));
                Valid.MyReportqry("rptBuktiResepRacikan.jasper", "report", "::[ Bukti Resep Elektronik Racik ]::",
                        "select temporary_resep_racikan.no, temporary_resep_racikan.temp1,temporary_resep_racikan.temp2,temporary_resep_racikan.temp3,temporary_resep_racikan.temp4 from temporary_resep_racikan where temporary_resep_racikan.temp5='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'", paramracik);
                this.setCursor(Cursor.getDefaultCursor());

            } else {
                System.out.println("mulai cetak non racik");

                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                Map<String, Object> param = new HashMap<>();
                param.put("namars", akses.getnamars());
                param.put("alamatrs", akses.getalamatrs());
                param.put("kotars", akses.getkabupatenrs());
                param.put("propinsirs", akses.getpropinsirs());
                param.put("kontakrs", akses.getkontakrs());
                param.put("emailrs", akses.getemailrs());
                param.put("noresep", tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString());
                param.put("tglresep", Sequel.cariIsi("select concat(resep_obat.tgl_peresepan, ',',resep_obat.jam_peresepan) from resep_obat where resep_obat.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'"));
                param.put("dokterperesep", Sequel.cariIsi("select dokter.nm_dokter from dokter join resep_obat on dokter.kd_dokter=resep_obat.kd_dokter where resep_obat.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'"));
                param.put("norm", Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
                param.put("penjamin", Sequel.cariIsi("select penjab.png_jawab from reg_periksa inner join penjab on reg_periksa.kd_pj=penjab.kd_pj where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
                param.put("namapasien", Sequel.cariIsi("select pasien.nm_pasien from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
                param.put("alergipasien", Sequel.cariIsi("select pasien.alergipasien from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
                param.put("tgllahir", Sequel.cariIsi("select pasien.tgl_lahir from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'") + " / " + Sequel.cariIsi("select concat(reg_periksa.umurdaftar,' ',reg_periksa.sttsumur) from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
                param.put("alamat", Sequel.cariIsi("select concat(pasien.alamat,', ',kelurahan.nm_kel,', ',kecamatan.nm_kec,', ',kabupaten.nm_kab,', ',propinsi.nm_prop) as alamat from pasien inner join kelurahan on pasien.kd_kel=kelurahan.kd_kel inner join kecamatan on pasien.kd_kec=kecamatan.kd_kec "
                        + "inner join kabupaten on pasien.kd_kab=kabupaten.kd_kab inner join propinsi on pasien.kd_prop=propinsi.kd_prop where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
                param.put("logo", Sequel.cariGambar("select logo from setting"));

//            jikaresepnonracik
                Valid.MyReportqry("rptBuktiResepNonRacik.jasper", "report", "::[ Bukti Resep Elektronik ]::",
                        "SELECT resep_dokter.kode_brng, databarang.nama_brng, resep_dokter.jml, resep_dokter.aturan_pakai, resep_dokter.no_resep FROM resep_obat INNER JOIN resep_dokter ON resep_obat.no_resep = resep_dokter.no_resep INNER JOIN databarang ON resep_dokter.kode_brng = databarang.kode_brng WHERE resep_obat.no_resep = '" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'", param);
                this.setCursor(Cursor.getDefaultCursor());
            }

//            
//            yang lama dibawah
//            Sequel.queryu("truncate table temporary_resep_racikan");
//            if (Sequel.cariInteger("select COUNT(resep_dokter_racikan.no_resep) from resep_dokter_racikan where resep_dokter_racikan.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'") > 0) {
//                try {
//                    pscetakracikan = koneksi.prepareStatement("SELECT\n"
//                            + "	resep_dokter_racikan.no_resep,\n"
//                            + "	resep_dokter_racikan.nama_racik,\n"
//                            + "	resep_dokter_racikan.jml_dr,resep_dokter_racikan.no_racik,\n"
//                            + "	resep_dokter_racikan.aturan_pakai,\n"
//                            + "	resep_dokter_racikan.keterangan,\n"
//                            + "	metode_racik.nm_racik,\n"
//                            + "	resep_obat.tgl_peresepan,\n"
//                            + "	resep_obat.jam_peresepan \n"
//                            + "FROM\n"
//                            + "	resep_dokter_racikan\n"
//                            + "	INNER JOIN metode_racik ON resep_dokter_racikan.kd_racik = metode_racik.kd_racik\n"
//                            + "	INNER JOIN resep_obat ON resep_dokter_racikan.no_resep = resep_obat.no_resep \n"
//                            + "WHERE\n"
//                            + "	resep_obat.no_resep = '" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'");
//
//                    rscetakracikan = pscetakracikan.executeQuery();
//                    try {
//                        while (rscetakracikan.next()) {
//                            rinciobat = "";
//                            pscetakracikandetail = koneksi.prepareStatement("SELECT\n"
//                                    + "	databarang.kode_brng, \n"
//                                    + "	databarang.nama_brng, \n"
//                                    + "	resep_dokter_racikan_detail.p1, \n"
//                                    + "	resep_dokter_racikan_detail.p2, \n"
//                                    + "	resep_dokter_racikan_detail.jml\n"
//                                    + "FROM\n"
//                                    + "	resep_dokter_racikan_detail\n"
//                                    + "	INNER JOIN\n"
//                                    + "	databarang\n"
//                                    + "	ON \n"
//                                    + "		resep_dokter_racikan_detail.kode_brng = databarang.kode_brng\n"
//                                    + "		where resep_dokter_racikan_detail.no_resep='" + rscetakracikan.getString("no_resep") + "' and resep_dokter_racikan_detail.no_racik='" + rscetakracikan.getString("no_racik") + "' ");
//                            rscetakracikandetail = pscetakracikandetail.executeQuery();
//                            try {
//                                while (rscetakracikandetail.next()) {
//                                    rinciobat = rscetakracikandetail.getString("kode_brng") + " " + rscetakracikandetail.getString("nama_brng") + " " + rscetakracikandetail.getString("p1") + "/" + rscetakracikandetail.getString("p2") + " " + rscetakracikandetail.getString("jml") + "pcs \n" + rinciobat;
//                                }
//                            } catch (Exception e) {
//                                System.out.println("Notifikasi Detail Racikan : " + e);
//                            } finally {
//                                if (rscetakracikandetail != null) {
//                                    rscetakracikandetail.close();
//                                }
//                                if (pscetakracikandetail != null) {
//                                    pscetakracikandetail.close();
//                                }
//                            }
//
//                            Sequel.menyimpan("temporary_resep_racikan", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", 38, new String[]{
//                                rscetakracikan.getString("no_racik"), rscetakracikan.getString("nama_racik") + "\n" + " (" + rinciobat + ")", rscetakracikan.getString("aturan_pakai"), rscetakracikan.getString("jml_dr"), rscetakracikan.getString("nm_racik"), rscetakracikan.getString("no_resep"), "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
//                            });
//
//                        }
//                    } catch (Exception e) {
//                        System.out.println("Notifikasi Detail Racikan : " + e);
//                    } finally {
//                        if (rscetakracikan != null) {
//                            rscetakracikan.close();
//                        }
//                        if (pscetakracikan != null) {
//                            pscetakracikan.close();
//                        }
//                    }
//                } catch (Exception e) {
//                    System.out.println("Notifikasi Detail Racikan : " + e);
//                }
//
//                System.out.println("mulai cetak racik");
//                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//                Map<String, Object> paramracik = new HashMap<>();
//                paramracik.put("namars", akses.getnamars());
//                paramracik.put("alamatrs", akses.getalamatrs());
//                paramracik.put("kotars", akses.getkabupatenrs());
//                paramracik.put("propinsirs", akses.getpropinsirs());
//                paramracik.put("kontakrs", akses.getkontakrs());
//                paramracik.put("emailrs", akses.getemailrs());
//                paramracik.put("noresep", tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString());
//                paramracik.put("tglresep", Sequel.cariIsi("select concat(resep_obat.tgl_peresepan, ',',resep_obat.jam_peresepan) from resep_obat where resep_obat.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'"));
//                paramracik.put("dokterperesep", Sequel.cariIsi("select dokter.nm_dokter from dokter join resep_obat on dokter.kd_dokter=resep_obat.kd_dokter where resep_obat.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'"));
//                paramracik.put("norm", Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
//                paramracik.put("namapasien", Sequel.cariIsi("select pasien.nm_pasien from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
//                paramracik.put("tgllahir", Sequel.cariIsi("select pasien.tgl_lahir from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'") + " / " + Sequel.cariIsi("select concat(reg_periksa.umurdaftar,' ',reg_periksa.sttsumur) from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
//                paramracik.put("alamat", Sequel.cariIsi("select concat(pasien.alamat,', ',kelurahan.nm_kel,', ',kecamatan.nm_kec,', ',kabupaten.nm_kab,', ',propinsi.nm_prop) as alamat from pasien inner join kelurahan on pasien.kd_kel=kelurahan.kd_kel inner join kecamatan on pasien.kd_kec=kecamatan.kd_kec "
//                        + "inner join kabupaten on pasien.kd_kab=kabupaten.kd_kab inner join propinsi on pasien.kd_prop=propinsi.kd_prop where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
//                paramracik.put("logo", Sequel.cariGambar("select logo from setting"));
//                Valid.MyReportqry("rptBuktiResepRacikan.jasper", "report", "::[ Bukti Resep Elektronik Racik ]::",
//                        "select temporary_resep_racikan.no, temporary_resep_racikan.temp1,temporary_resep_racikan.temp2,temporary_resep_racikan.temp3,temporary_resep_racikan.temp4 from temporary_resep_racikan where temporary_resep_racikan.temp5='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'", paramracik);
//                this.setCursor(Cursor.getDefaultCursor());
//            } else {
//                System.out.println("mulai cetak non racik");
//
//                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//                Map<String, Object> param = new HashMap<>();
//                param.put("namars", akses.getnamars());
//                param.put("alamatrs", akses.getalamatrs());
//                param.put("kotars", akses.getkabupatenrs());
//                param.put("propinsirs", akses.getpropinsirs());
//                param.put("kontakrs", akses.getkontakrs());
//                param.put("emailrs", akses.getemailrs());
//                param.put("noresep", tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString());
//                param.put("tglresep", Sequel.cariIsi("select concat(resep_obat.tgl_peresepan, ',',resep_obat.jam_peresepan) from resep_obat where resep_obat.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'"));
//                param.put("dokterperesep", Sequel.cariIsi("select dokter.nm_dokter from dokter join resep_obat on dokter.kd_dokter=resep_obat.kd_dokter where resep_obat.no_resep='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'"));
//                param.put("norm", Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
//                param.put("namapasien", Sequel.cariIsi("select pasien.nm_pasien from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
//                param.put("tgllahir", Sequel.cariIsi("select pasien.tgl_lahir from pasien where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'") + " / " + Sequel.cariIsi("select concat(reg_periksa.umurdaftar,' ',reg_periksa.sttsumur) from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'"));
//                param.put("alamat", Sequel.cariIsi("select concat(pasien.alamat,', ',kelurahan.nm_kel,', ',kecamatan.nm_kec,', ',kabupaten.nm_kab,', ',propinsi.nm_prop) as alamat from pasien inner join kelurahan on pasien.kd_kel=kelurahan.kd_kel inner join kecamatan on pasien.kd_kec=kecamatan.kd_kec "
//                        + "inner join kabupaten on pasien.kd_kab=kabupaten.kd_kab inner join propinsi on pasien.kd_prop=propinsi.kd_prop where pasien.no_rkm_medis='" + Sequel.cariIsi("select reg_periksa.no_rkm_medis from reg_periksa where reg_periksa.no_rawat='" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString() + "'") + "'"));
//                param.put("logo", Sequel.cariGambar("select logo from setting"));
//
////            jikaresepnonracik
//                Valid.MyReportqry("rptBuktiResepNonRacik.jasper", "report", "::[ Bukti Resep Elektronik ]::",
//                        "SELECT resep_dokter.kode_brng, databarang.nama_brng, resep_dokter.jml, resep_dokter.aturan_pakai, resep_dokter.no_resep FROM resep_obat INNER JOIN resep_dokter ON resep_obat.no_resep = resep_dokter.no_resep INNER JOIN databarang ON resep_dokter.kode_brng = databarang.kode_brng WHERE resep_obat.no_resep = '" + tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString() + "'", param);
//                this.setCursor(Cursor.getDefaultCursor());
//            }
        }
    }//GEN-LAST:event_ppCetakResepActionPerformed

    private void TCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TCariKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            tampil();
        }
    }//GEN-LAST:event_TCariKeyPressed

    private void getData() {
        if (tbPemisahan.getSelectedRow() != -1) {

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgTemplateResep dialog = new DlgTemplateResep(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnCari;
    private widget.Button BtnKeluar;
    private widget.Button BtnTambah;
    private widget.PanelBiasa FormInput;
    private javax.swing.JPopupMenu Popup;
    private widget.TextBox TCari;
    private widget.ComboBox cmbHlm;
    private widget.InternalFrame internalFrame1;
    private widget.Label jLabel30;
    private widget.Label jLabel6;
    private widget.Label jLabel7;
    private widget.Label jLabel8;
    private widget.panelisi panelisi1;
    private javax.swing.JMenuItem ppCetakResep;
    private widget.ScrollPane scrollPane1;
    private widget.Table tbPemisahan;
    // End of variables declaration//GEN-END:variables

    public void tampil() {
        Valid.tabelKosong(tabMode);
        try {
            ps = koneksi.prepareStatement("select resep_obat.no_resep,resep_obat.tgl_peresepan,resep_obat.jam_peresepan,"
                    + " resep_obat.no_rawat,resep_obat.kd_dokter,dokter.nm_dokter, resep_obat_template.nama_template,"
                    + " if(resep_obat.jam_peresepan=resep_obat.jam,'Belum Terlayani','Sudah Terlayani') as status,resep_obat.status as status_asal "
                    + " from resep_obat inner join reg_periksa inner join resep_obat_template inner join dokter on resep_obat.no_rawat=reg_periksa.no_rawat  "
                    + " and resep_obat.no_resep=resep_obat_template.no_resep and resep_obat.kd_dokter=dokter.kd_dokter where "
                    + " resep_obat.kd_dokter=? and resep_obat_template.nama_template LIKE ? order by resep_obat.tgl_perawatan,resep_obat.jam ASC LIMIT " + cmbHlm.getSelectedItem().toString() + "");

            try {

                ps.setString(1, kddokter);
                ps.setString(2, "%" + TCari.getText().trim() + "%");
                rs = ps.executeQuery();
                while (rs.next()) {
                    tabMode.addRow(new String[]{
                        rs.getString("no_resep"), rs.getString("tgl_peresepan"), rs.getString("jam_peresepan"), rs.getString("nama_template"),
                        "", "", rs.getString("nm_dokter"), rs.getString("kd_dokter")
                    });
                    tabMode.addRow(new String[]{"", "Jumlah", "Satuan", "Aturan Pakai", "Kode/No", "Nama Obat/Racikan", "", ""});
                    ps2 = koneksi.prepareStatement("select databarang.kode_brng,databarang.nama_brng,resep_dokter.jml,"
                            + "databarang.kode_sat,resep_dokter.aturan_pakai from resep_dokter inner join databarang on "
                            + "resep_dokter.kode_brng=databarang.kode_brng where resep_dokter.no_resep=? order by databarang.kode_brng");
                    try {
                        ps2.setString(1, rs.getString("no_resep"));
                        rs2 = ps2.executeQuery();
                        while (rs2.next()) {
                            tabMode.addRow(new String[]{
                                "", rs2.getString("jml"), rs2.getString("kode_sat"), rs2.getString("aturan_pakai"), rs2.getString("kode_brng"), rs2.getString("nama_brng"), "", ""
                            });
                        }
                    } catch (Exception e) {
                        System.out.println("Notifikasi 2 : " + e);
                    } finally {
                        if (rs2 != null) {
                            rs2.close();
                        }
                        if (ps2 != null) {
                            ps2.close();
                        }
                    }
                    ps2 = koneksi.prepareStatement(
                            "select resep_dokter_racikan.no_racik,resep_dokter_racikan.nama_racik,"
                            + "resep_dokter_racikan.kd_racik,metode_racik.nm_racik as metode,"
                            + "resep_dokter_racikan.jml_dr,resep_dokter_racikan.aturan_pakai,"
                            + "resep_dokter_racikan.keterangan from resep_dokter_racikan inner join metode_racik "
                            + "on resep_dokter_racikan.kd_racik=metode_racik.kd_racik where "
                            + "resep_dokter_racikan.no_resep=? ");
                    try {
                        ps2.setString(1, rs.getString("no_resep"));
                        rs2 = ps2.executeQuery();
                        while (rs2.next()) {
                            tabMode.addRow(new String[]{
                                "", rs2.getString("jml_dr"), rs2.getString("metode"), rs2.getString("aturan_pakai"), "No.Racik : " + rs2.getString("no_racik"), rs2.getString("nama_racik"), "", ""
                            });
                            ps3 = koneksi.prepareStatement("select databarang.kode_brng,databarang.nama_brng,resep_dokter_racikan_detail.jml,"
                                    + "databarang.kode_sat from resep_dokter_racikan_detail inner join databarang on resep_dokter_racikan_detail.kode_brng=databarang.kode_brng "
                                    + "where resep_dokter_racikan_detail.no_resep=? and resep_dokter_racikan_detail.no_racik=? order by databarang.kode_brng");
                            try {
                                ps3.setString(1, rs.getString("no_resep"));
                                ps3.setString(2, rs2.getString("no_racik"));
                                rs3 = ps3.executeQuery();
                                while (rs3.next()) {
                                    tabMode.addRow(new String[]{
                                        "", "   " + rs3.getString("jml"), "   " + rs3.getString("kode_sat"), "", "   " + rs3.getString("kode_brng"), "   " + rs3.getString("nama_brng"), "", "", ""
                                    });
                                }
                            } catch (Exception e) {
                                System.out.println("Notifikasi 3 : " + e);
                            } finally {
                                if (rs3 != null) {
                                    rs3.close();
                                }
                                if (ps3 != null) {
                                    ps3.close();
                                }
                            }
                        }
                    } catch (Exception e) {
                        System.out.println("Notifikasi 2 : " + e);
                    } finally {
                        if (rs2 != null) {
                            rs2.close();
                        }
                        if (ps2 != null) {
                            ps2.close();
                        }
                    }
                }
            } catch (Exception ex) {
                System.out.println("Notifikasi : " + ex);
            } finally {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
            }
        } catch (Exception e) {
            System.out.println("Notifikasi : " + e);
        }
    }

    public void isCek() {
        BtnTambah.setEnabled(akses.getresep_dokter());
    }

    public void setRM(String norawat, String norm, String kodedokter, String kodepj, String status) {
        this.norm = norm;
        this.status = status;
        this.norawat = norawat;
        this.kddokter = kodedokter;
        this.kode_pj = kodepj;
    }

    private void panggilform() {
        DlgPeresepanDokter resep = new DlgPeresepanDokter(null, false);
        resep.setSize(internalFrame1.getWidth(), internalFrame1.getHeight());
        resep.setLocationRelativeTo(internalFrame1);
        resep.setNoRmDariTemplate(norawat, tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 7).toString(),
                tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 6).toString(), norm,
                kode_pj, status);
        resep.isCek();
        resep.tampilobat2(tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString());
        resep.setVisible(true);
    }

    private void panggilform2() {
        DlgPeresepanDokter resep = new DlgPeresepanDokter(null, false);
        resep.setSize(internalFrame1.getWidth(), internalFrame1.getHeight());
        resep.setLocationRelativeTo(internalFrame1);
        resep.MatikanJam();
        resep.setNoRm(tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 3).toString(),
                Valid.SetTgl2(tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 1).toString()),
                tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 2).toString().substring(0, 2),
                tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 2).toString().substring(3, 5),
                tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 2).toString().substring(6, 8),
                tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 7).toString(),
                tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 6).toString(), status);
        resep.isCek();
        resep.tampilobat(tbPemisahan.getValueAt(tbPemisahan.getSelectedRow(), 0).toString());
        resep.setVisible(true);
    }
}
